#-*- coding:utf-8 -*-

import numpy as np
from numpy import cos, sin


class Baxter_Link:
    
    def __init__(self, num, inertias, com, dh):
        self.num = num
        self.__intertias = inertias
        #__inertias has 6 values of inertias of the link(xx, yy, zz, xy, yz, xz)
        self.com = com
        #com has the position of Center of Mass(x, y, z)
        self.d, self.a, self.alfa, self.m = dh
        #__dh has the Denavit-Hartenberg parameters(d, a, alfa, m)

    def __str__(self):
        res = self.__class__.__name__
        res += '@'
        res += '0x'
        res += '%X' % id(self)
        res += '[\n'
        res += '-number='
        res += '%d' % self.num
        res += ',\n-intertias(xx, xy, xz, yy, yz, zz)\n  ='
        res += str(self.__intertias)
        res += ',\n-CenterOfMass='
        res += str(self.com)
        res += ',\n-DH parameters(d, a, alfa, m)='
        res += str([self.d, self.a, self.alfa, self.m])
        res += '\n]'
        return res
        
    def get_T_Matrix(self, theta):
        #This function of object L(i) returns transform matrix ^(i-1)T_(i)
        d, a, alfa, m = self.d, self.a, self.alfa, self.m
        return np.matrix([
            [cos(theta), -cos(alfa)*sin(theta),  sin(alfa)*sin(theta), a*cos(theta)],
            [sin(theta),  cos(alfa)*cos(theta), -sin(alfa)*cos(theta), a*sin(theta)],
            [         0,             sin(alfa),             cos(alfa),            d],
            [         0,                     0,                     0,            1]
        ])

    def Jacobian(self):
        xx, yy, zz, xy, yz, xz = self.__inertias
        d, a, alfa, m = self.d, self.a, self.alfa, self.m
        x, y, z = self.com
        return np.matrix([
            [(-xx+yy+zz)/2,           xy,            xz, m*x],
            [           xy, (xx-yy+zz)/2,            yz, m*y],
            [           xz,           yz, (+xx+yy-zz)/2, m*z],
            [           mx,           my,            mz,   m]
        ])


def main():
    b = Baxter_Link(0,0,[10,3,6],[0,0,0,0])
    print b.get_T_Matrix(0)
    print b.com


if __name__ == "__main__" :
    main()
